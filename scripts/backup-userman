# backup-userman script
# by Vichaya Sirisanthana

# Policy
#
# _ ftp         _ reboot
# x read        x write
# x policy      x test
# _ password    _ sniff
# x sensitive   _ romon
# _ dude

# FTP parameters
:local ftpUser "ftp"
:local ftpPwd "fly1ngF1sh"

# Get system name
:local identity [/system identity get name]

# Get date
:local date [/system clock get date]
:local year [:pick $date 7 11]
:local month [:pick $date 0 3]
:local day [:pick $date 4 6]

# Convert month to numeric
:local months ("jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec")
:local mm ([:find $months $month -1] + 1)
:if ($mm < 10) do={ :set mm ("0" . $mm) }

# Get time
:local time [/system clock get time]
:local hour [:pick $time 0 2]
:local min [:pick $time 3 5]
:local sec [:pick $time 6 8]

# Names
:local backupName "$identity-userman-$year$mm$day-$hour$min$sec-auto.umb"
:local backupNameLatest "$identity-userman-latest.umb"
:local subject "$identity User Manager Backup"

# Backup
:do {
  /tool user-manager database save name=$backupName

  # Wait for backup to complete
  :delay 30s
  :log info "Successfully backup-ed $backupName"
} on-error={
  :log error "Failed to backup $backupName"
  :error
}

# Copy backup file to latest
:do {
  /tool fetch address=127.0.0.1 mode=ftp user=$ftpUser password=$ftpPwd src-path=$backupName dst-path=$backupNameLatest
  :log info "Successfully copied $backupName to $backupNameLatest"
} on-error={
  :log error "Failed to copy $backupName to $backupNameLatest"
}

# Send backup file
:local destinations ("nim.punspace.com","tpg-cat.punspace.com")
:foreach destination in=$destinations do={
  :do {
    /tool fetch address=$destination mode=ftp user=$ftpUser password=$ftpPwd upload=yes src-path=$backupNameLatest dst-path=$backupNameLatest
    :log info "Successfully uploaded $backupNameLatest to $destination"
  } on-error={
    :log error "Failed to upload $backupNameLatest to $destination"
  }
}

# Send email
:do {
  /tool e-mail send server=[:resolve smtp.gmail.com] to=autobot@punspace.com subject="$subject" file=$backupName
  :log info "Successfully email-ed $backupName"
} on-error={
  :log error "Failed to email $backupName"
}

# Remove backup file
:do {

  # Wait for email to complete
  :delay 300s

  /file remove $backupName
  :log info "Successfully removed $backupName"
} on-error={
  :log error "Failed to remove $backupName"
}